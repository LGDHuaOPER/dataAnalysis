/**
 * 
 */
package com.eoulu.service.impl;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.eoulu.dao.WaferDao;
import com.eoulu.dao.user.UserDao;
import com.eoulu.entity.WaferDO;
import com.eoulu.service.WaferService;
import com.eoulu.transfer.FileFilterTool;
import com.eoulu.transfer.PageDTO;
import com.eoulu.util.DataBaseUtil;
import com.eoulu.util.FileUtil;



/**
 * @author mengdi
 *
 * 
 */
public class WaferServiceImpl implements WaferService{
	
	WaferDao dao = new WaferDao();
	DataBaseUtil db = new DataBaseUtil();

	@Override
	public List<Map<String, Object>> listWafer(PageDTO page, String keyword,String Parameter) {
		return dao.listWafer(page, keyword,Parameter);
	}

	@Override
	public int countWafer(String keyword,String Parameter) {
		return dao.countWafer(keyword,Parameter);
	}

	@Override
	public boolean remove(String waferId) {
		return dao.remove(waferId);
	}

	@Override
	public boolean update(WaferDO wafer) {
		return dao.update(wafer);
	}

	@Override
	public List<Map<String, Object>> getAllUser() {
		return new UserDao().getAllUser();
	}

	@Override
	public List<Map<String,Object>> getProductCategory(){
		return dao.getProductCategory();
	}
		
	/* 刚不动了！先用原来的吧！加班ing~ */
	
	public  ArrayList<String> filelist = new ArrayList<String>();
		//zip压缩文件中 上传失败的CSV文件,map文件 和 excel文件
		public  ArrayList<String> faileCSV = new ArrayList<String>();
		//存放map的晶圆编号和路径
		public  Map<String, Object> mapfilelist = new HashMap<String, Object>();
		//存放map的晶圆编号和路径
		public  Map<String, Object> excelfilelist = new HashMap<String, Object>();
		//CSV总个数
		public  int CSVnum=0;
		//Map总个数
		public  int Mapnum=0;
		//Excel总个数
		public  int Excelnum=0;	
	public Map<String, Object> Zip(String tempPath,String fileName,String temp,String filename2,Boolean flag,String productCatagory,String testOperator,String description,String currentUser,String dataFormat)
	{
		StringBuffer errorFile = new StringBuffer("");//错误格式文件
		String filename="";//上传失败的CSV、Map、Excel文件名
		String status="";
		int filternum=1;//标志先导入map文件和CSV文件
		Map<String, Object> resultMap=new HashMap<String, Object> ();
		//用户上传的是一个压缩包
	  	  //若是一个文件夹。
	  	File file1= FileUtil.unZipFiles(tempPath+"\\"+fileName,temp+"\\"+filename2);
	  	System.out.println(file1.getName());
	  	long time4 = System.currentTimeMillis();
		if(!"0".equals(dataFormat)){
			resultMap.put("flag", false);
		  	resultMap.put("status", "上传的文件与选择的格式不一致！");
		  	return resultMap;
		}
			System.out.println("EOULU");
			//导入map
		  	getFiles(file1.getAbsolutePath(),flag,productCatagory, testOperator,description,tempPath,temp,filternum,currentUser,dataFormat,fileName);
		  	//导入excel文件
		  	filternum=2;
		  	getFiles(file1.getAbsolutePath(),flag,productCatagory, testOperator,description,tempPath,temp,filternum,currentUser,dataFormat,fileName);
		  	//导入CSV文件
		  	filternum=3;
			getFiles(file1.getAbsolutePath(),flag,productCatagory, testOperator,description,tempPath,temp,filternum,currentUser,dataFormat,fileName);
	  	for(int i=0;i<filelist.size();i++){
	  		if(!(filelist.get(i).endsWith(".CSV")||filelist.get(i).endsWith(".csv")||filelist.get(i).endsWith(".zip")||
	  			filelist.get(i).endsWith(".map")||filelist.get(i).endsWith(".xlsx")||filelist.get(i).endsWith(".xls"))){
	  			errorFile.append(filelist.get(i)+"格式有误,");
	  		}
		}
	  	//上传失败的CSV文件名
	  	for(int i=0;i<faileCSV.size();i++){
	  		if(i==faileCSV.size()-1){
	  			filename=filename+faileCSV.get(i);
	  		}else{
	  			filename=filename+faileCSV.get(i)+",";
	  		}
	  	}
	  	
	  	flag=CSVnum>0||Mapnum>0||Excelnum>0?false:true;
   		if(!"".equals(filename)||!"".equals(errorFile.toString())){
   			int failnum;//上传失败的CSV、map、excel个数
   			//包含多个上传失败的文件
   			if(filename.contains(",")){
   				String filenames[]=filename.split(",");
   				failnum=filenames.length;
   			}else{
   				//包含0个上传失败的文件
   				if("".equals(filename)){
   					failnum=0;
   				//包含1个上传失败的文件
   				}else{
   					failnum=1;
   				}
   			}
       		if(failnum==(CSVnum+Mapnum+Excelnum)){
       			status="全部上传失败："+filename+","+errorFile.toString();
       		}else{
       			status="部分导入成功，未导入文件有："+filename+","+errorFile.toString();
       		}	
   		}else{
   			status="";
   		}
   		resultMap.put("flag", flag);//存在CSV
  		resultMap.put("status", status);//上传失败的CSV文件名
		return resultMap;
	}
	
	void getFiles(String filePath,Boolean flag,String productCatagory,String testOperator,String description,String tempPath,String temp,int filternum,String currentUser,String dataFormat,String fileName){
		File root=new File(filePath);
		File[] files=root.listFiles();//获取当前目录下的所有文件与文件夹
		boolean flagDirectory = isExist(files);
		CSV(filePath, flag,productCatagory, testOperator,description, tempPath, temp,filternum,currentUser,flagDirectory,dataFormat, fileName);
		for(File file:files){
			if(file.isDirectory()){
				if(!flagDirectory){//没有曲线数据时，才进入向下一级文件夹目录；当前路径下若有文件夹且包含.csv与.map文件，则在读取.csv文件后取读取曲线数据
					getFiles(file.getAbsolutePath(),flag,productCatagory, testOperator,description,tempPath, temp,filternum,currentUser,dataFormat,fileName);
				}
			}else{
				if(filternum==1 && !flagDirectory){
					filelist.add(file.getName());
				}
			}
		}
	}
	
	/**
	 * 曲线数据判断
	 * 判断当前路径下是否包含.csv与.map文件，且包含文件夹
	 * @param  files 当前路径下的文件
	 * @return
	 */
	public static boolean isExist(File[] files){
		
		boolean temp1 =  false;
		boolean temp2 = false;
		for(File file:files){
			if(file.isDirectory() ){//是目录，但不遍历子目录
				temp1 = true;
			}else{
				String filePath = file.getAbsolutePath();
				int begIndex = filePath.lastIndexOf(".");
				String temp = filePath.substring(begIndex+1, filePath.length());
				if(temp.equalsIgnoreCase("csv") || temp.equalsIgnoreCase("map")){
					temp2 = true;
				}
			}
		}
		return temp1 && temp2;
	}
	
	
	public  void CSV(String path,Boolean flag,String productCatagory,String testOperator,String description,String tempPath,String temp,int filternum,String currentUser,boolean flagDirectory,String dataFormat,String fileName)
	{
		/*
		File file1=new File(path);
		FileFilterTool filetool=new FileFilterTool();
		String failcsv;//上传失败的CSV文件
		String status="";//上传文件的返回值
		if(filternum==1){
			filetool.addType(".map");
		}else if(filternum==2){
			filetool.addType(".xlsx");
			filetool.addType(".xls");
		}else if(filternum==3){
			filetool.addType(".CSV");
			filetool.addType(".csv");
		}
		File[] files1=file1.listFiles(filetool);
		for(int i=0,length = files1.length;i<length;i++){
			try{
			//zip,调用Zip方法
			if(files1[i].getName().endsWith(".CSV")||files1[i].getName().endsWith(".csv")){
				flag=false;
				CSVnum=CSVnum+1;
				String waferid = fileDao.getWaferID(files1[i].getAbsolutePath());
				Connection conn=db.getConnection();
				boolean flag2= fileDao.queryWaferinfo(conn, waferid);
				if("上传失败，文件中的晶圆编号为空值！".equals(waferid)||"上传失败，目标文件内容有误！".equals(waferid)){
					failcsv=getReturn(files1[i].getName(),waferid);
					faileCSV.add(failcsv);
					conn.close();
					continue;
				 }
				if(flag2){
					status="文件已经上传！";
					failcsv=getReturn(files1[i].getName(),status);
					faileCSV.add(failcsv);
					conn.close();
					continue;
				}
				//找到对应的map文件
				if(mapfilelist.get(waferid)!=null){
					//把map文件内容写入CSV文件
					Transtion.WriteToCsv(files1[i].getAbsolutePath(),(String)mapfilelist.get(waferid));
					long timeCSV = System.currentTimeMillis();
					status=fileDao.GetWaferData(conn2,files1[i].getAbsolutePath(),productcatagories,testOperator,Details,files1[i].getAbsolutePath(),DataFormat, fileName, interval);
					//未找到对应的map文件
					long timeCSV2 = System.currentTimeMillis();
					System.out.println("how long:"+(timeCSV2-timeCSV));
				}else{
					conn2.close();
					status="上传失败，导入目标文件前没有导入对应的map文件！";
				}
				failcsv=getReturn(files1[i].getName(),status);
				if(!"".equals(failcsv)){
					faileCSV.add(failcsv);
				}
			}else if(files1[i].getName().endsWith(".map")){
				flag=false;
				Mapnum=Mapnum+1;
				MapFileDao mapFileDao=new MapFileDao();
				Map<String, Object> resultMap=mapFileDao.SaveMapFile(files1[i].getAbsolutePath());
				status=(String) resultMap.get("status");
				if("文件已经上传！".equals(status)||"success".equals(status)){
					Set<String> keys=resultMap.keySet();
					for(String Waferid: keys){
						mapfilelist.put(Waferid, resultMap.get(Waferid));
						break;
					}
				}
				failcsv=getReturn(files1[i].getName(),status);
				//上传失败
				if(!"".equals(failcsv)){
					faileCSV.add(failcsv);
				}
			}else if(files1[i].getName().endsWith(".xlsx")||files1[i].getName().endsWith(".xls")){
				flag=false;
				Excelnum=Excelnum+1;
				String waferid=Transtion.GetexcelWaferID(files1[i].getAbsolutePath());
				Connection conn2=DbUtil2.getConnect();
				boolean flag2=fileDao.queryWaferinfo(conn2, waferid);
				//excel文件中晶圆编号为空
				if("上传失败，文件中的晶圆编号为空值！".equals(waferid)){
					failcsv=getReturn(files1[i].getName(),waferid);
					faileCSV.add(failcsv);
					conn2.close();
					continue;
				 }
				if(flag2){
					status="文件已经上传！";
					failcsv=getReturn(files1[i].getName(),status);
					faileCSV.add(failcsv);
					conn2.close();
					continue;
				}
				//找到对应的map文件
				if(mapfilelist.get(waferid)!=null){
					String CSVname=Transtion.readfile(files1[i].getAbsolutePath(),(String)mapfilelist.get(waferid));
					if(!(CSVname.contains("WaferID"))){
						 status=CSVname;
						 conn2.close();
					 //导入转换后的CSV文件。
					 }else{
						 String CSV[]=CSVname.split("\n");
						 List<String> filelist=new ArrayList<>();
						 for(int j=0;j<CSV.length;j++){
							 filelist.add(CSV[j]);
						 }
						status=fileDao.GetWaferDataExcel(conn2,filelist,productcatagories,testOperator,Details,files1[i].getAbsolutePath(),DiaryUsername,DataFormat);
					 }
				//未找到对应的map文件
				}else{
					status = Transtion.getExcelData(files1[i].getAbsolutePath(),productcatagories,testOperator,Details,DiaryUsername,DataFormat,"",0);
				}
				 failcsv=getReturn(files1[i].getName(),status);
				 if(!"".equals(failcsv)){
					faileCSV.add(failcsv);
				 } 
			}
			}catch(IOException e){
//				ExceptionLog.printException(e);
				failcsv=getReturn(files1[i].getName(),"文件不存在！");
				faileCSV.add(failcsv);
				continue;
		}catch (SQLException e){
//			ExceptionLog.printException(e);
			failcsv=getReturn(files1[i].getName(),"数据库操作异常！");
			faileCSV.add(failcsv);
			continue;
		}catch(Exception e){
//			ExceptionLog.printException(e);
			failcsv=getReturn(files1[i].getName(),"未知错误！");
			faileCSV.add(failcsv);
			continue;
		}
			} //啊啊啊，困~累~饿~，好吧，我撤了
		*/
	}
	
	
	//判断问题CSV
		public static String getReturn(String filename,String status){
			String name="";
			switch(status) {
			  case "上传失败，目标文件内容有误！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(内容有误)";
		    	  break;
		      //文件已经上传
			  case "文件已经上传！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(已上传)";
		    	  break;
			  case "上传失败，文件中的晶圆编号为空值！":
				  name=filename.substring(filename.lastIndexOf("\\")+1)+"(晶圆编号为空)";
			      break;
			  case "上传失败，文件中缺失编号坐标X轴增长方向！":
				  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失编号坐标X轴增长方向)";
		    	  break;
		      case "上传失败，文件中缺失编号坐标Y轴增长方向！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失编号坐标Y轴增长方向)";
		    	  break;
		      case "上传失败，文件中缺失晶圆图坐标X轴增长方向！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失晶圆图坐标X轴增长方向)";
		    	  break;
		      case "上传失败，文件中缺失晶圆图坐标Y轴增长方向！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失晶圆图坐标Y轴增长方向)";
		    	  break;
		      case "上传失败，文件中缺失晶圆图参考Die的X坐标！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失晶圆图参考Die的X坐标)";
		    	  break;
		      case "上传失败，文件中缺失晶圆图参考Die的Y坐标！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失晶圆图参考Die的Y坐标)";
		    	  break;
		      case "上传失败，文件中缺失晶圆图参考Die编号的X坐标！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失晶圆图参考Die编号的X坐标)";
		    	  break;
		      case "上传失败，文件中缺失晶圆图参考Die编号的Y坐标！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(缺失晶圆图参考Die编号的Y坐标)";
		    	  break;
		      case "上传失败，文件中的测试人员为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(测试人员为空)";
			      break;
		      case "上传失败，文件中的设备编号为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(设备编号为空)";
			      break;
		      case "上传失败，文件中的批次编号为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(批次编号为空)";
			      break;
		      case "上传失败，文件中的DieType存在空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(DieType存在空值)";
			      break;
		      case "上传失败，文件中的DieX存在空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(DieX存在空值)";
			      break;
		      case "上传失败，文件中的DieY存在空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(DieY存在空值)";
		    	  break;
		      case "上传失败，文件中的Bin值存在空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(Bin值存在空值)";
		    	  break;
		      //缺少map文件	
		      case "上传失败，导入目标文件前没有导入对应的map文件！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(没有map文件)";
		    	  break;
		      case "上传失败，文件中参数的上下限填写不完整！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(上下限不完整)";
		    	  break;
		      case "上传失败，文件中位置坐标(Coordinate)格式不正确！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(Coordinate格式有误)";
		    	  break;
		      case "上传失败，文件中字母坐标格式不正确！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(字母坐标格式有误)";
		    	  break;
		      case "上传失败，文件中FileName为空！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(FileName为空)";
		    	  break;
		      case "上传失败，文件中TesttotalTime为空！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(TesttotalTime为空)";
		    	  break;
		      case "上传失败，文件中参数名称存在空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(参数名存在空值)";
		    	  break;
		      case "success":
		    	  name="";
		    	  break;
		      case "重复数据":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(重复数据)";
		    	  break;
		      case "上传失败，文件中的Diameter为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(Diameter为空)";
		    	  break;
		      case "上传失败，文件中的DieSizeX为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(DieSizeX为空)";
		    	  break;
		      case "上传失败，文件中的DieSizeY为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(DieSizeY为空)";
		    	  break;
		      case "上传失败，文件中的FlatLength为空值！":
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(FlatLength为空)";
		    	  break;
		      default:
		    	  name=filename.substring(filename.lastIndexOf("\\")+1)+"(其他错误)";
		    }
			return name;
		}
}
